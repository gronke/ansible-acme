---

- set_fact: _acme_domains="{{ [acme_domain] }}"
- set_fact: _acme_domains="{{ _acme_domains + ['www.' + acme_domain] }}"
  when: acme_request_www

# Account

- name: Account Key exists
  command: openssl genrsa -out "{{ acme_account_file }}" 4096
  args:
    creates: "{{ acme_account_file }}"

- name: Account Key permissions are corrent
  file:
    path: "{{ acme_account_file }}"
    owner: "{{ acme_user }}"
    group: "{{ acme_group }}"
    mode: "0600" # acme_group must not be allowed to read this

# Private Key

- name: Private Key exists
  command: openssl genrsa -out "{{ _acme_domain_key_path }}" 4096
  args:
    creates: "{{ _acme_domain_key_path }}"

- name: Account Key permissions are corrent
  file:
    path: "{{ _acme_domain_key_path }}"
    owner: "{{ acme_user }}"
    group: "{{ acme_group }}"
    mode: "0640"

# Single Domain

- name: Certificate Signing Request exists
  command: openssl req -new -sha256 -key "{{ _acme_domain_key_path }}" -subj "/CN={{ _acme_domains[0] }}" -out "{{ _acme_domain_csr_path }}"
  args:
    creates: "{{ _acme_domain_csr_path }}"
  when: (_acme_domains | length) == 1

- name: Domain specific OpenSSL configuration is absent
  file:
    path: "{{ acme_export_dir }}/openssl.cnf"
    state: absent
  when: (_acme_domains | length) == 1

# Multi Domains

- name: OpenSSL configuration for multi-domain certificates was copied
  command: cp /etc/ssl/openssl.cnf "{{ acme_export_dir }}/openssl.cnf"
  args:
    creates: "{{ acme_export_dir }}/openssl.cnf"
  when: (_acme_domains | length) > 1

- name: Domain specific OpenSSL configuration contains [SAN] topic
  lineinfile:
    path: "{{ acme_export_dir }}/openssl.cnf"
    state: present
    line: "[SAN]"
    insertafter: EOF
  when: (_acme_domains | length) > 1

- name: domain specific OpenSSL configuration contains altnames
  lineinfile:
    path: "{{ acme_export_dir }}/openssl.cnf"
    insertafter: "^\\[SAN\\]"
    line: "subjectAltName=DNS:{{ _acme_domains | join(',DNS:') }}"
    regexp: "^subjectAltName="
  when: (_acme_domains | length) > 1

- name: Certificate Signing Request exists
  command: openssl req -new -sha256 -key "{{ _acme_domain_key_path }}" -subj "/" -reqexts SAN -config "{{ acme_export_dir }}/openssl.cnf" -out "{{ _acme_domain_csr_path }}"
  args:
    creates: "{{ _acme_domain_csr_path }}"
  when: (_acme_domains | length) > 1

# Single and Multi Domains

- name: CSR permissions are corrent
  file:
    path: "{{ _acme_domain_csr_path }}"
    owner: "{{ acme_user }}"
    group: "{{ acme_group }}"
    mode: "0640"

# Pre-Challenge

- name: Stopping Services
  service: name="{{item}}" state=stopped
  with_items: "{{ acme_pause_services }}"
  ignore_errors: yes
  register: _services_stopped
  when: acme_use_own_http_server

- name: Start SimpleHTTPServer for ACME Challenges
  service:
    name: acmesimplehttpd
    state: started
  when: acme_use_own_http_server

# Challenge

- set_fact: _acme_combined_args="{{ acme_default_args + ['--csr ' + _acme_domain_csr_path] + acme_args }}"

- name: Sign the Certificate
  shell: "{{ ansible_python_interpreter | default('/usr/bin/python3') }} {{ acme_command }} {{ _acme_combined_args | join(' ') }} > \"{{ _acme_domain_cert_path }}\""
  args:
    chdir: "{{ acme_export_dir }}"
  become: yes
  become_user: "{{ acme_user }}"
  ignore_errors: true
  register: _acme_client_command
  when: not acme_test

- name: cert.pem permissions are correct
  file:
    path: "{{ _acme_domain_cert_path }}"
    owner: "{{ acme_user }}"
    group: "{{ acme_group }}"
    mode: "0644"

- name: fullchain.pem is created
  shell: cat "{{ _acme_domain_cert_path }}" "{{ _acme_intermediate_certificate_path }}" > "{{ _acme_domain_fullchain_path }}"

- name: fullchain.pem permissions are correct
  file:
    path: "{{ _acme_domain_fullchain_path }}"
    owner: "{{ acme_user }}"
    group: "{{ acme_group }}"
    mode: "0644"

# Post-Challenge

- name: Stop SimpleHTTPServer after responding to the challenge
  service:
    name: acmesimplehttpd
    state: stopped
  when: acme_use_own_http_server

- name: Starting paused Services
  service: name="{{item.item}}" state=started
  when: acme_use_own_http_server and (item.state is defined and item.state == "stopped")
  with_items: "{{ _services_stopped.results|default([]) }}"

# Error Handling

- set_fact: _signing_successful='{{ _acme_client_command.rc == 0 }}'
  when: not acme_test

- fail: msg="Error signing the certificate"
  when: not acme_test and not _signing_successful
