---

- set_fact: letsencrypt_domains="{{ [letsencrypt_domain] }}"
- set_fact: _letsencrypt_domains="{{ _letsencrypt_domains + [{{ 'www.' + letsencrypt_domain }}] }}"
  when: letsencrypt_request_www

- set_fact: _letsencrypt_combined_args="{{ letsencrypt_default_args + ['-d ' + (_letsencrypt_domains | join(' -d '))] + _letsencrypt_args }}"

- name: Stopping Services
  service: name="{{item}}" state=stopped
  with_items: "{{ letsencrypt_pause_services }}"
  ignore_errors: yes
  register: _services_stopped

- name: Start SimpleHTTPServer for ACME Challenges
  service:
    name: letsencrypt-simplehttpd
    state: started

- name: fullchain.pem is linked
  file:
    src: "{{ letsencrypt_export_dir }}/{{ item[0] }}"
    dest: "{{ letsencrypt_home_dir }}/simp_le/{{ item[1] }}"
    state: link
    owner: "{{ letsencrypt_user }}"
    group: "{{ letsencrypt_group }}"
    force: yes
  with_items:
    - [ "fullchain.pem", "fullchain.pem" ]
    - [ "privkey.pem", "key.pem" ]
    - [ "cert.pem", "cert.pem" ]
    - [ "chain.pem", "chain.pem" ]

- name: LetsEncrypt account key is linked
  file:
    src: "{{ letsencrypt_account_file }}"
    dest: "{{ letsencrypt_home_dir }}/simp_le/account_key.json"
    state: link
    owner: "{{ letsencrypt_user }}"
    group: "{{ letsencrypt_group }}"
    force: yes

- name: Obtain or renew cert for domain
  shell: PATH="{{ letsencrypt_virtualenv_dir }}/bin" "{{ letsencrypt_virtualenv_dir }}/bin/python" ./simp_le.py {{_letsencrypt_combined_args | join(' ')}} 2>&1
  args:
    chdir: "{{ letsencrypt_home_dir }}/simp_le"
    executable: /bin/bash
  become: yes
  become_user: "{{ letsencrypt_user }}"
  ignore_errors: true
  register: _certbot_command

- set_fact: _signing_successful='{{ certbot_success_message in _certbot_command.stdout }}'
- set_fact: _signing_skipped='{{ (certbot_skip_renewal_message in _certbot_command.stdout) and not letsencrypt_force_renew }}'
- debug: msg="{{ (_certbot_command.stdout_lines if _certbot_command.stdout_lines is defined else _certbot_command.stderr_lines) | pprint }}"
  when: letsencrypt_verbose or not (_signing_successful and _signing_skipped)

- name: Stop SimpleHTTPServer after running certbot
  service:
    name: letsencrypt-simplehttpd
    state: stopped

- name: Starting paused Services
  service: name="{{item.item}}" state=started
  when: (item.state is defined and item.state == "stopped")
  with_items: "{{ _services_stopped.results }}"

- fail: msg="Error signing the certificate"
  when: (not _signing_successful) and not _signing_skipped
